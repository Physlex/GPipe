#ifndef PIPE_H
#define PIPE_H

/**
* Includes for use in PIPE framework
*/
///////////////////
#include "Buffer.h"
#include "Init.h"
///////////////////
#include <Angel.h> //Extended from Angel
///////////////////

#define METHOD GL_TRIANGLE_FAN

const int MAXPOINTS = 4 * 6;
const int SQUARESIZE = 4;
const int NUMOBJECTS = 6;

class Pipe {
 public:
   /**
   *  Default Constructor
   */
   Pipe();

   /**
   *  Creates a vertex object for use in CreateBuffer and InitShader
   *  @details Programmer builds algorithim here.
   *  Meant to be more expandable then the main file.
   */
   void DrawScheme();

   /**
   *  Initializes shaders for program
   */
   void InitializeShaders();

   /**
   *  Returns programID
   */
   GLuint GetProgramID();

   /**
   *  Returns the genBuffer of this
   *  @return genBuffer, buffer object
   */
   std::vector<Buffer> GetBufferObject();

   /**
   *  Returns the vaoID
   */
   GLuint GetVaoID();

   /**
   *  Returns the buffID
   */
   GLuint GetBuffID();

   /**
   *  Deep copy of pipeline and buffer
   */
   Pipe operator=(Pipe RHS);

 private:
   /**
   *  Creates buffer relevant to current scheme
   */
   void CreateBuffer(int bufferAt, GLuint numObjects, GLsizeiptr size, const void *data);
   void CreateBuffer(GLuint numObjects, GLsizeiptr sizep, GLsizeiptr sizeColours,  const void *vertexData, const void *colourData);

   /**
   *  Defines vertex attributes in shader
   *  @param progID, generated by glUseProgram
   *  @param inName, filename where vshader is defined
   */
   void DefineAttribute(const char *inName, GLint buffLoc = 0);
   void DefineAttribute(const char *inName, GLsizeiptr sizePoints);

   std::vector<Buffer> bufferVec;
   GLuint progID;
   GLuint vaoID;
   GLuint buffID;
};

#endif
